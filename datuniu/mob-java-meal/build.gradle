def vJavaLang = '1.8'

def javaProjects = [project(':meal-site'), project(':meal-business'), project(':meal-common')]
def bootProjects = [project(':meal-site')]

buildscript {
    ext {
        springBootVersion = '1.2.3.RELEASE'
    }
    repositories {
        maven { url 'http://nexus.tuniu.org/nexus/content/groups/public/'}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    idea.module {
        excludeDirs += [
                file('bin'),      // containing build artifacts from Eclipse (if any)
                file('work'),     // containing transient artifacts used by embedded Tomcat
                file('logs'),     // containing app logs written by embedded Tomcat
                file('data'),     // containing logs and data written by elasticsearch
                file('.settings') // containing intentionally checked-in Eclipse metadata
        ]
    }
}

configure(javaProjects) {
    apply plugin: 'java'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang
    repositories {
        mavenLocal()
        maven { url 'http://nexus.tuniu.org/nexus/content/groups/public/' }
    }

    dependencies {
        testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
        testCompile "org.springframework:spring-test:4.1.6.RELEASE"
        testCompile "cglib:cglib-nodep:3.1"
        compile 'org.springframework.boot:spring-boot-starter-web:1.2.3.RELEASE'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.importorder.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }
}

configure(bootProjects) {
    apply plugin: 'spring-boot'
    apply plugin: 'war'
}

version = '1.0'

repositories {
    mavenLocal()
    maven { url 'http://nexus.tuniu.org/nexus/content/groups/public/' }
}

apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://10.10.30.200:9000"
        property "sonar.jdbc.url", "jdbc:mysql://10.10.30.200:3306/sonar?useUnicode=true&amp;characterEncoding=utf8"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonartest"
        property "sonar.jdbc.password", "tuniu520"
    }
}

subprojects {
    sonarRunner {
        sonarProperties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.junit.reportsPath", "build/test-results"
        }
    }
}